#+TITLE: Xmonad Configuration File
#+DESCRIPTION: My XMonad Configuration in org mode
#+PROPERTY: header-args :tangle xmonad.hs
#+AUTHOR: Michael Zappa

Run org-babel-tangle to repopulate the xmonad.hs and .xmobarrc files with your changes.

* TABLE OF CONTENTS :toc:
- [[#imports-and-defaults][Imports and Defaults]]
- [[#startup-hook][Startup Hook]]
- [[#fullscreen-support][Fullscreen Support]]
- [[#prompt-configuration][Prompt Configuration]]
- [[#search-engines][Search Engines]]
- [[#manage-hook][Manage Hook]]
- [[#layout-hook][Layout Hook]]
- [[#keys][Keys]]
- [[#workspaces][Workspaces]]
- [[#main][Main]]
- [[#xmobar-config][XMobar Config]]
  - [[#fields][Fields]]
  - [[#commands][Commands]]

* Imports and Defaults
#+BEGIN_SRC haskell

import XMonad
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import Data.Monoid
import System.Exit
import XMonad.Util.Run
import XMonad.Util.SpawnOnce
import qualified XMonad.StackSet as W
import qualified Data.Map        as M
import Graphics.X11.ExtraTypes.XF86
import XMonad.Hooks.EwmhDesktops
import Control.Monad (when, join)
import Data.Maybe (maybeToList)
import XMonad.Util.EZConfig (additionalKeysP)
import XMonad.Actions.Submap
import qualified XMonad.Actions.Search as S
import XMonad.Prompt
import XMonad.Prompt.FuzzyMatch
import Control.Arrow (first)

myTerminal :: String
myTerminal = "kitty"

myFont :: String
myFont = "xft:System San Fransisco Display:pixelsize=16:antialias=true:hinting=true"
#+END_SRC
* Startup Hook
#+BEGIN_SRC haskell

myStartupHook :: X ()
myStartupHook = do
      spawnOnce "nitrogen --restore"
      spawnOnce "picom -f" >> addEWMHFullscreen
      spawnOnce "nm-applet"
      spawnOnce "blueman-applet"
      spawnOnce "pasystray"
      spawnOnce "~/.scripts/toggle_trayer.sh"
#+END_SRC
* Fullscreen Support
Thanks to https://github.com/xmonad/xmonad-contrib/issues/183#issuecomment-307407822
#+BEGIN_SRC haskell
addEWMHFullscreen :: X ()
addEWMHFullscreen   = do
    wms <- getAtom "_NET_WM_STATE"
    wfs <- getAtom "_NET_WM_STATE_FULLSCREEN"
    mapM_ addNETSupported [wms, wfs]

addNETSupported :: Atom -> X ()
addNETSupported x   = withDisplay $ \dpy -> do
    r               <- asks theRoot
    a_NET_SUPPORTED <- getAtom "_NET_SUPPORTED"
    a               <- getAtom "ATOM"
    liftIO $ do
       sup <- (join . maybeToList) <$> getWindowProperty32 dpy a_NET_SUPPORTED r
       when (fromIntegral x `notElem` sup) $
         changeProperty32 dpy r a_NET_SUPPORTED a propModeAppend [fromIntegral x]
#+END_SRC
* Prompt Configuration
#+BEGIN_SRC haskell
myPromptConfig :: XPConfig
myPromptConfig = def
      { font                = myFont
      , bgColor             = "#2E3440"
      , fgColor             = "#d0d0d0"
      , bgHLight            = "#7895b3"
      , fgHLight            = "#000000"
      , borderColor         = "#2E3440"
      , promptBorderWidth   = 0
      , promptKeymap        = myPromptKeymap
      , position            = CenteredAt { xpCenterY = 0.42, xpWidth = 0.3 }
      , height              = 20
      , historySize         = 256
      , historyFilter       = id
      , defaultText         = []
      , autoComplete        = Just 100000  -- set Just 100000 for .1 sec
      , showCompletionOnTab = False
      , searchPredicate     = fuzzyMatch
      , alwaysHighlight     = True
      , maxComplRows        = Nothing      -- set to Just 5 for 5 rows
      }

-- autocomplete turned off for Searching, not launching
myPromptConfig' :: XPConfig
myPromptConfig' = myPromptConfig
      { autoComplete        = Nothing
      }
 
myPromptKeymap :: M.Map (KeyMask,KeySym) (XP ())
myPromptKeymap = M.fromList $
     map (first $ (,) controlMask)   -- control + <key>
     [ (xK_z, killBefore)            -- kill line backwards
     , (xK_k, killAfter)             -- kill line forwards
     , (xK_a, startOfLine)           -- move to the beginning of the line
     , (xK_e, endOfLine)             -- move to the end of the line
     , (xK_m, deleteString Next)     -- delete a character foward
     , (xK_b, moveCursor Prev)       -- move cursor forward
     , (xK_f, moveCursor Next)       -- move cursor backward
     , (xK_BackSpace, killWord Prev) -- kill the previous word
     , (xK_y, pasteString)           -- paste a string
     , (xK_g, quit)                  -- quit out of prompt
     , (xK_bracketleft, quit)
     ]
     ++
     map (first $ (,) mod1Mask)       -- meta key + <key>
     [ (xK_BackSpace, killWord Prev) -- kill the prev word
     , (xK_f, moveWord Next)         -- move a word forward
     , (xK_b, moveWord Prev)         -- move a word backward
     , (xK_d, killWord Next)         -- kill the next word
     , (xK_n, moveHistory W.focusUp')   -- move up thru history
     , (xK_p, moveHistory W.focusDown') -- move down thru history
     ]
     ++
     map (first $ (,) 0) -- <key>
     [ (xK_Return, setSuccess True >> setDone True)
     , (xK_KP_Enter, setSuccess True >> setDone True)
     , (xK_BackSpace, deleteString Prev)
     , (xK_Delete, deleteString Next)
     , (xK_Left, moveCursor Prev)
     , (xK_Right, moveCursor Next)
     , (xK_Home, startOfLine)
     , (xK_End, endOfLine)
     , (xK_Down, moveHistory W.focusUp')
     , (xK_Up, moveHistory W.focusDown')
     , (xK_Escape, quit)
     ]


#+END_SRC
* Search Engines
#+BEGIN_SRC haskell
archwiki, reddit :: S.SearchEngine

archwiki = S.searchEngine "archwiki" "https://wiki.archlinux.org/index.php?search="
reddit   = S.searchEngine "reddit" "https://www.reddit.com/search/?q="

searchList :: [(String, S.SearchEngine)]
searchList = [ ("a", archwiki)
             , ("d", S.duckduckgo)
             , ("g", S.google)
             , ("h", S.hoogle)
             , ("i", S.images)
             , ("r", reddit)
             , ("w", S.wikipedia)
             , ("y", S.youtube)
             , ("z", S.amazon)
             ]
#+END_SRC
* Manage Hook
#+BEGIN_SRC haskell

myManageHook :: Query (Endo WindowSet)
myManageHook = composeAll
  [
    manageDocks
  ]

#+END_SRC

* Layout Hook
#+BEGIN_SRC haskell
myLayoutHook = avoidStruts $ layoutHook def
#+END_SRC
* Keys
Additional keybindings for my configuration, using EZConfig notation.
#+BEGIN_SRC haskell
myKeys :: [(String, X ())]
myKeys =
    -- Application Shortcuts
    [
      ("M-x", spawn "firefox"),
      ("M-c", spawn "code"),
      ("M-n", spawn "thunar"),
      ("M-m", spawn "emacs")
    ]
    ++

    -- Volume, Brightness Manipulation, Keyboard and Systray Change
    [
      ("<XF86AudioLowerVolume>", spawn "amixer -q sset Master 5%-"),
      ("<XF86AudioRaiseVolume>", spawn "amixer -q sset Master 5%+"),
      ("<XF86AudioMute>", spawn "amixer sset Master toggle"),
      ("<XF86MonBrightnessDown>", spawn "light -U 10"),
      ("<XF86MonBrightnessUp>", spawn "light -A 10"),
      ("M-C-k", spawn "~/.scripts/change_keyboard_layout.sh"),
      ("M-C-b", spawn "~/.scripts/toggle_trayer.sh")
    ]
    ++

    -- launch a terminal
    [ ("M-<Return>", spawn myTerminal)

    -- launch rofi (application launcher)
    , ("M-/", spawn "rofi -show run -theme $HOME/.config/rofi/nord")

    -- close focused window
    , ("M-S-q", kill)

    -- Swap the focused window and the master window
    , ("M-S-<Return>", windows W.swapMaster)

    -- Quit xmonad
    , ("M-S-z", io (exitWith ExitSuccess))
    ]
    ++

    [
      ("M-" ++ key, (windows $ W.greedyView ws))
      | (key, ws) <- myExtraWorkspaces
    ]
    ++

    [
      ("M-S-" ++ key, (windows $ W.shift ws))
      | (key, ws) <- myExtraWorkspaces
    ]
    ++ [("M-s " ++ key, S.promptSearch myPromptConfig' engine) | (key, engine) <- searchList ]
    ++ [("M-S-s " ++ key, S.selectSearch engine) | (key, engine) <- searchList ]
#+END_SRC

* Workspaces
Manual control over my workspace names and assigned keys.
#+BEGIN_SRC haskell
myExtraWorkspaces :: [(String, WorkspaceId)]
myExtraWorkspaces = [("0", "0")]
myWorkspaces :: [WorkspaceId]
myWorkspaces = ["1", "2","3","4","5","6","7","8","9"] ++ (map snd myExtraWorkspaces)
#+END_SRC
* Main
#+BEGIN_SRC haskell

main :: IO ()
main = do
    xmproc <- spawnPipe "xmobar ~/.xmonad/.xmobarrc"

    xmonad $ ewmh $ docks def
        { terminal = myTerminal
        , startupHook        = myStartupHook
        , manageHook = myManageHook <+> manageHook def
        , layoutHook = myLayoutHook
        , handleEventHook = fullscreenEventHook <+> handleEventHook def
        , logHook = dynamicLogWithPP xmobarPP
                        { ppOutput = hPutStrLn xmproc
                        , ppCurrent = xmobarColor "#7895b3" "" . wrap "[""]"
                        , ppTitle = xmobarColor "#ABABAB" "" . shorten 50
                        , ppUrgent = xmobarColor "yellow" "red"
                        }
        , modMask = mod4Mask     -- Rebind Mod to the Windows key
        --, keys    = customKeys myDeletedKeys myInsertedKeys
        , workspaces = myWorkspaces
        , borderWidth = 0
        } `additionalKeysP` myKeys
#+END_SRC
* XMobar Config
** Fields
#+BEGIN_SRC haskell :tangle .xmobarrc
Config {

   -- appearance
     font =         "xft:System San Fransisco Display:pixelsize=16:antialias=true:hinting=true"
   , bgColor =      "black"
   , fgColor =      "#ECEFF4"
   , position =     Top
   , border =       BottomB
   , borderColor =  "#646464"

   -- layout
   , sepChar =  "%"   -- delineator between plugin names and straight text
   , alignSep = "}{"  -- separator between left-right alignment

   -- general behavior
   , lowerOnStart =     True    -- send to bottom of window stack on start
   , hideOnStart =      False   -- start with window unmapped (hidden)
   , allDesktops =      True    -- show on all desktops
   , overrideRedirect = True    -- set the Override Redirect flag (Xlib)
   , pickBroadest =     False   -- choose widest display (multi-monitor)
   , persistent =       True    -- enable/disable hiding (True = disabled)
   , template = " %StdinReader% | %battery% | %multicpu% | %coretemp% | %memory% | %dynnetwork%}{ | %default:Master% | %date% || %kbd% "
#+END_SRC
** Commands
#+BEGIN_SRC haskell :tangle .xmobarrc
   , commands =
        [
          --volume monitor
          Run Volume "default" "Master" [] 5

        -- network activity monitor (dynamic interface resolution)
         , Run DynNetwork     [ "--template" , "<dev>: <tx>kB/s|<rx>kB/s"
                             , "--Low"      , "1000"       -- units: B/s
                             , "--High"     , "5000"       -- units: B/s
                             , "--low"      , "#88C0D0" -- , "darkgreen"
                             , "--normal"   , "#88C0D0" -- , "darkorange"
                             , "--high"     , "#88C0D0" -- , "darkred"
                             ] 10

        -- cpu activity monitor
        , Run MultiCpu       [ "--template" , "Cpu: <total0>%|<total1>%"
                             , "--Low"      , "50"         -- units: %
                             , "--High"     , "85"         -- units: %
                             , "--low"      , "#88C0D0" -- , "darkgreen"
                             , "--normal"   , "#88C0D0" -- , "darkorange"
                             , "--high"     , "#88C0D0" -- , "darkred"
                             ] 10

        -- cpu core temperature monitor
        , Run CoreTemp       [ "--template" , "Temp: <core0>°C|<core1>°C"
                             , "--Low"      , "70"        -- units: °C
                             , "--High"     , "80"        -- units: °C
                             , "--low"      , "#88C0D0" -- , "darkgreen"
                             , "--normal"   , "#88C0D0" -- , "darkorange"
                             , "--high"     , "#88C0D0" -- , "darkred"
                             ] 50

        -- memory usage monitor
        , Run Memory         [ "--template" ,"Mem: <usedratio>%"
                             , "--Low"      , "20"        -- units: %
                             , "--High"     , "90"        -- units: %
                             , "--low"      , "#88C0D0" -- , "darkgreen"
                             , "--normal"   , "#88C0D0" -- , "darkorange"
                             , "--high"     , "#88C0D0" -- , "darkred"
                             ] 10

        -- battery monitor
        , Run Battery        [ "--template" , "Batt: <acstatus>"
                             , "--Low"      , "10"        -- units: %
                             , "--High"     , "80"        -- units: %
                             , "--low"      , "#88C0D0" -- , "darkred"
                             , "--normal"   , "#88C0D0" -- , "darkorange"
                             , "--high"     , "#88C0D0" -- , "darkgreen"

                             , "--" -- battery specific options
                                       -- discharging status
                                       , "-o"	, "<left>% (<timeleft>)"
                                       -- AC "on" status
                                       , "-O"	, "<fc=#88C0D0>Charging</fc>"
                                       -- charged status
                                       , "-i"	, "<fc=#88C0D0>Charged</fc>"
                             ] 50

        -- time and date indicator
        --   (%F = y-m-d date, %a = day of week, %T = h:m:s time)
        , Run Date           "<fc=#ECEFF4>%F (%a) %T</fc>" "date" 10

        -- keyboard layout indicator
        , Run Kbd            [ ("us(intl)" , "<fc=#88C0D0>INTL</fc>")
                             , ("us"         , "<fc=#88C0D0>US</fc>")
                             ]
        , Run StdinReader
        ]
   }
#+END_SRC
