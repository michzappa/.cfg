#+TITLE: Xmonad Configuration File
#+DESCRIPTION: My XMonad Configuration in org mode
#+PROPERTY: header-args :tangle xmonad.hs
#+AUTHOR: Michael Zappa

Run org-babel-tangle to repopulate the xmonad.hs and .xmobarrc files with your changes.

* TABLE OF CONTENTS :toc:
- [[#imports][Imports]]
- [[#startup-hook][Startup Hook]]
- [[#fullscreen-support][Fullscreen Support]]
- [[#manage-hook][Manage Hook]]
- [[#deleted-keys][Deleted Keys]]
- [[#inserted-keys][Inserted Keys]]
- [[#workspaces][Workspaces]]
- [[#main][Main]]
- [[#xmobar-config][XMobar Config]]
  - [[#fields][Fields]]
  - [[#commands][Commands]]

* Imports
#+BEGIN_SRC haskell

import XMonad
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import Data.Monoid
import System.Exit
import XMonad.Util.Run
import XMonad.Util.SpawnOnce
import qualified XMonad.StackSet as W
import qualified Data.Map        as M
import Graphics.X11.ExtraTypes.XF86
import XMonad.Util.CustomKeys
import XMonad.Hooks.EwmhDesktops
import Control.Monad (when, join)
import Data.Maybe (maybeToList)
#+END_SRC
* Startup Hook
#+BEGIN_SRC haskell

myStartupHook :: X ()
myStartupHook = do
      spawnOnce "nitrogen --restore"
      spawnOnce "picom -f" >> addEWMHFullscreen
#+END_SRC
* Fullscreen Support
#+BEGIN_SRC haskell
addEWMHFullscreen :: X ()
addEWMHFullscreen   = do
    wms <- getAtom "_NET_WM_STATE"
    wfs <- getAtom "_NET_WM_STATE_FULLSCREEN"
    mapM_ addNETSupported [wms, wfs]

addNETSupported :: Atom -> X ()
addNETSupported x   = withDisplay $ \dpy -> do
    r               <- asks theRoot
    a_NET_SUPPORTED <- getAtom "_NET_SUPPORTED"
    a               <- getAtom "ATOM"
    liftIO $ do
       sup <- (join . maybeToList) <$> getWindowProperty32 dpy a_NET_SUPPORTED r
       when (fromIntegral x `notElem` sup) $
         changeProperty32 dpy r a_NET_SUPPORTED a propModeAppend [fromIntegral x]
#+END_SRC
* Manage Hook
#+BEGIN_SRC haskell

myManageHook :: Query (Endo WindowSet)
myManageHook = composeAll
  [
    manageDocks
  ]

#+END_SRC

* Deleted Keys
Deleted default keybindings, to be replaced by my custom keybindings or removed because I dislike them.
#+BEGIN_SRC haskell
myDeletedKeys :: XConfig l -> [(KeyMask, KeySym)]
myDeletedKeys XConfig {modMask = modm} =
    [
      (modm, xK_Return) -- was swap focused window with master, now open terminal
    , (modm .|. shiftMask, xK_Return) -- was open terminal, now swap focused window with master
    , (modm, xK_p) -- was open prompt
    , (modm .|. shiftMask, xK_q) -- was quit XMonad, now close focused window
    , (modm, xK_comma) -- was increment number of windows in master area
    , (modm, xK_period) -- was decrement number of windows in master area
    , (modm, xK_m) -- was move focus to master window, now open emacs

    ]
#+END_SRC

* Inserted Keys
Additional keybindings for my configuration
#+BEGIN_SRC haskell
myInsertedKeys :: XConfig l -> [((KeyMask, KeySym), X ())]
myInsertedKeys conf@(XConfig {modMask = modm}) =
    -- Application Shortcuts
    [
      ((modm, xK_x), spawn "firefox"),
      ((modm, xK_c), spawn "code"),
      ((modm, xK_n), spawn "thunar"),
      ((modm, xK_m), spawn "emacs")
    ]
    ++

    -- Volume, Brightness Manipulation and Keyboard Change
    [
      ((0, xF86XK_AudioLowerVolume), spawn "amixer -q sset Master 5%-"),
      ((0, xF86XK_AudioRaiseVolume), spawn "amixer -q sset Master 5%+"),
      ((0, xF86XK_AudioMute       ), spawn "amixer set Master toggle"),
      ((0, xF86XK_MonBrightnessDown), spawn "$HOME/.scripts/decrement_screen_brightness.sh"),
      ((0, xF86XK_MonBrightnessUp), spawn "$HOME/.scripts/increment_screen_brightness.sh"),
      ((mod1Mask .|.  controlMask, xK_k), spawn "~/.scripts/change_keyboard_layout.sh")
    ]
    ++

    -- launch a terminal
    [ ((modm, xK_Return), spawn $ XMonad.terminal conf)

    -- launch rofi (application launcher)
    , ((modm,               xK_slash     ), spawn "rofi -show run -lines 5 -eh 2 -width 20 -padding 10 -theme $HOME/.config/rofi/arc-dark")

    -- close focused window
    , ((modm .|. shiftMask, xK_q     ), kill)

    -- Swap the focused window and the master window
    , ((modm .|. shiftMask, xK_Return), windows W.swapMaster)

    -- Quit xmonad
    , ((modm .|. shiftMask, xK_z     ), io (exitWith ExitSuccess))
    ]
    ++

    [
      ((modm, key), (windows $ W.greedyView ws))
      | (key, ws) <- myExtraWorkspaces
    ]
    ++

    [
      ((modm .|. shiftMask, key), (windows $ W.shift ws))
      | (key, ws) <- myExtraWorkspaces
    ]
#+END_SRC
* Workspaces
Manual control over my workspace names and assigned keys.
#+BEGIN_SRC haskell
myExtraWorkspaces :: [(KeySym, WorkspaceId)]
myExtraWorkspaces = [(xK_0, "0")]
myWorkspaces :: [WorkspaceId]
myWorkspaces = ["1", "2","3","4","5","6","7","8","9"] ++ (map snd myExtraWorkspaces)
#+END_SRC
* Main
#+BEGIN_SRC haskell

main :: IO ()
main = do
    xmproc <- spawnPipe "xmobar ~/.xmonad/.xmobarrc"

    xmonad $ ewmh $ docks def
        { terminal = "kitty"
        , startupHook        = myStartupHook
        , manageHook = myManageHook <+> manageHook def
        , layoutHook = avoidStruts  $  layoutHook def
        , handleEventHook = fullscreenEventHook <+> handleEventHook def
        , logHook = dynamicLogWithPP xmobarPP
                        { ppOutput = hPutStrLn xmproc
                        , ppCurrent = xmobarColor "#7895b3" "" . wrap "[""]"
                        , ppTitle = xmobarColor "#ABABAB" "" . shorten 50
                        , ppUrgent = xmobarColor "yellow" "red"
                        }
        , modMask = mod4Mask     -- Rebind Mod to the Windows key
        , keys    = customKeys myDeletedKeys myInsertedKeys
        , workspaces = myWorkspaces
        }

#+END_SRC
* XMobar Config
** Fields
#+BEGIN_SRC haskell :tangle .xmobarrc
Config {

   -- appearance
     font =         "xft:System San Fransisco Display:pixelsize=16:antialias=true:hinting=true"
   , bgColor =      "black"
   , fgColor =      "#ABABAB"
   , position =     Top
   , border =       BottomB
   , borderColor =  "#646464"

   -- layout
   , sepChar =  "%"   -- delineator between plugin names and straight text
   , alignSep = "}{"  -- separator between left-right alignment

   -- general behavior
   , lowerOnStart =     True    -- send to bottom of window stack on start
   , hideOnStart =      False   -- start with window unmapped (hidden)
   , allDesktops =      True    -- show on all desktops
   , overrideRedirect = True    -- set the Override Redirect flag (Xlib)
   , pickBroadest =     False   -- choose widest display (multi-monitor)
   , persistent =       True    -- enable/disable hiding (True = disabled)
   , template = " %StdinReader% | %battery% | %multicpu% | %coretemp% | %memory% | %dynnetwork%}{ %default:Master% | %date% || %kbd% "
#+END_SRC
** Commands
#+BEGIN_SRC haskell :tangle .xmobarrc
   , commands =

        [
          --volume monitor
          Run Volume "default" "Master" [] 5,

        -- network activity monitor (dynamic interface resolution)
         Run DynNetwork     [ "--template" , "<dev>: <tx>kB/s|<rx>kB/s"
                             , "--Low"      , "1000"       -- units: B/s
                             , "--High"     , "5000"       -- units: B/s
                             , "--low"      , "#7895b3" -- , "darkgreen"
                             , "--normal"   , "#7895b3" -- , "darkorange"
                             , "--high"     , "#7895b3" -- , "darkred"
                             ] 10

        -- cpu activity monitor
        , Run MultiCpu       [ "--template" , "Cpu: <total0>%|<total1>%"
                             , "--Low"      , "50"         -- units: %
                             , "--High"     , "85"         -- units: %
                             , "--low"      , "#7895b3" -- , "darkgreen"
                             , "--normal"   , "#7895b3" -- , "darkorange"
                             , "--high"     , "#7895b3" -- , "darkred"
                             ] 10

        -- cpu core temperature monitor
        , Run CoreTemp       [ "--template" , "Temp: <core0>째C|<core1>째C"
                             , "--Low"      , "70"        -- units: 째C
                             , "--High"     , "80"        -- units: 째C
                             , "--low"      , "#7895b3" -- , "darkgreen"
                             , "--normal"   , "#7895b3" -- , "darkorange"
                             , "--high"     , "#7895b3" -- , "darkred"
                             ] 50

        -- memory usage monitor
        , Run Memory         [ "--template" ,"Mem: <usedratio>%"
                             , "--Low"      , "20"        -- units: %
                             , "--High"     , "90"        -- units: %
                             , "--low"      , "#7895b3" -- , "darkgreen"
                             , "--normal"   , "#7895b3" -- , "darkorange"
                             , "--high"     , "#7895b3" -- , "darkred"
                             ] 10

        -- battery monitor
        , Run Battery        [ "--template" , "Batt: <acstatus>"
                             , "--Low"      , "10"        -- units: %
                             , "--High"     , "80"        -- units: %
                             , "--low"      , "#7895b3" -- , "darkred"
                             , "--normal"   , "#7895b3" -- , "darkorange"
                             , "--high"     , "#7895b3" -- , "darkgreen"

                             , "--" -- battery specific options
                                       -- discharging status
                                       , "-o"	, "<left>% (<timeleft>)"
                                       -- AC "on" status
                                       , "-O"	, "<fc=#7895b3>Charging</fc>"
                                       -- charged status
                                       , "-i"	, "<fc=#7895b3>Charged</fc>"
                             ] 50

        -- time and date indicator
        --   (%F = y-m-d date, %a = day of week, %T = h:m:s time)
        , Run Date           "<fc=#ABABAB>%F (%a) %T</fc>" "date" 10

        -- keyboard layout indicator
        , Run Kbd            [ ("us(intl)" , "<fc=#7895b3>INTL</fc>")
                             , ("us"         , "<fc=#7895b3>US</fc>")
                             ]
        , Run StdinReader
        ]
   }
#+END_SRC
